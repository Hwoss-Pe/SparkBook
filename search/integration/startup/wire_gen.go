// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"Webook/search/grpc"
	"Webook/search/ioc"
	"Webook/search/repository"
	"Webook/search/repository/dao"
	"Webook/search/service"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitSearchServer() *grpc2.SearchServiceServer {
	client := InitESClient()
	userDAO := dao.NewUserElasticDAO(client)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDAO(client)
	tagDAO := dao.NewTagESDAO(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc2.NewSearchServiceServer(searchService)
	return searchServiceServer
}

func InitSyncServer() *grpc2.SyncServiceServer {
	client := InitESClient()
	anyDAO := dao.NewAnyESDAO(client)
	anyRepository := repository.NewAnyRepository(anyDAO)
	userDAO := dao.NewUserElasticDAO(client)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDAO(client)
	tagDAO := dao.NewTagESDAO(client)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	syncService := service.NewSyncService(anyRepository, userRepository, articleRepository)
	syncServiceServer := grpc2.NewSyncServiceServer(syncService)
	return syncServiceServer
}

// wire.go:

var serviceProviderSet = wire.NewSet(dao.NewUserElasticDAO, dao.NewArticleElasticDAO, dao.NewTagESDAO, dao.NewAnyESDAO, repository.NewUserRepository, repository.NewAnyRepository, repository.NewArticleRepository, service.NewSyncService, service.NewSearchService)

var thirdProvider = wire.NewSet(
	InitESClient, ioc.InitLogger,
)
